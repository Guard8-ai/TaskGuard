{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"TaskGuard Documentation","text":"<p>AI-ready local task management with Git integration</p>"},{"location":"#what-is-taskguard","title":"\ud83c\udfaf What is TaskGuard?","text":"<p>TaskGuard is a local-first, Git-native task management system built in Rust that provides:</p> <ul> <li>\ud83d\udccb Simple task management - Markdown files with YAML metadata</li> <li>\ud83d\udd17 Dependency tracking - Automatic blocking based on task dependencies</li> <li>\ud83e\udd16 AI collaboration - Zero-setup integration with Claude Code and other LLMs</li> <li>\ud83d\udd12 Git-native - All tasks stored in version control</li> <li>\u26a1 Fast &amp; secure - Rust-powered with comprehensive security testing</li> </ul>"},{"location":"#key-features","title":"\u2728 Key Features","text":"<ul> <li> <p>\ud83d\ude80 Quick Setup</p> <p>Initialize in seconds with <code>taskguard init</code>. No configuration required.</p> </li> <li> <p>\ud83d\udce6 Local-First</p> <p>All data stays on your machine. No cloud dependencies.</p> </li> <li> <p>\ud83d\udd04 Git Integration</p> <p>Analyze commit history and suggest task status updates automatically.</p> </li> <li> <p>\ud83e\udd16 AI-Ready</p> <p>Structured format perfect for LLM consumption and automation.</p> </li> <li> <p>\ud83d\udd10 Security Tested</p> <p>17/17 security tests passing. Production-ready.</p> </li> <li> <p>\u26a1 Zero Dependencies</p> <p>Single binary. No runtime requirements besides Git.</p> </li> </ul>"},{"location":"#quick-start","title":"\ud83d\ude80 Quick Start","text":"<p>Get started with TaskGuard in under 5 minutes:</p>"},{"location":"#1-installation","title":"1. Installation","text":"macOSLinuxWindows <pre><code>git clone git@github.com:Guard8-ai/TaskGuard.git\ncd TaskGuard\n./scripts/install-macos.sh\n</code></pre> <pre><code>git clone git@github.com:Guard8-ai/TaskGuard.git\ncd TaskGuard\n./scripts/install-linux.sh\n</code></pre> <pre><code>git clone git@github.com:Guard8-ai/TaskGuard.git\ncd TaskGuard\n.\\scripts\\install-windows.ps1\n</code></pre>"},{"location":"#2-initialize-project","title":"2. Initialize Project","text":"<pre><code>cd ~/my-project\ntaskguard init\n</code></pre>"},{"location":"#3-create-your-first-task","title":"3. Create Your First Task","text":"<pre><code>taskguard create --title \"Setup database\" --area backend --priority high\n</code></pre>"},{"location":"#4-view-tasks","title":"4. View Tasks","text":"<pre><code>taskguard list\n</code></pre> <p>Output: <pre><code>\ud83d\udcc1 BACKEND\n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n   \u2b55 \ud83d\udfe0 backend-001 Setup database\n\n\ud83d\udcca SUMMARY\n   Total tasks: 1\n   todo: 1\n</code></pre></p>"},{"location":"#navigation-guide","title":"\ud83d\udcd6 Navigation Guide","text":"<ul> <li> <p>Getting Started</p> <p>New to TaskGuard? Start here for installation and your first task.</p> <p> Get Started</p> </li> <li> <p>Core Concepts</p> <p>Learn about task structure, dependencies, and state management.</p> <p> Core Concepts</p> </li> <li> <p>Features</p> <p>Explore TaskGuard's powerful features and capabilities.</p> <p> Features</p> </li> <li> <p>Usage Examples</p> <p>See real-world workflows and integration patterns.</p> <p> Examples</p> </li> <li> <p>API Reference</p> <p>Complete command reference and configuration documentation.</p> <p> API Docs</p> </li> <li> <p>Contributing</p> <p>Help improve TaskGuard. Development setup and guidelines.</p> <p> Contribute</p> </li> </ul>"},{"location":"#why-taskguard","title":"\ud83c\udfaf Why TaskGuard?","text":""},{"location":"#local-first-philosophy","title":"Local-First Philosophy","text":"<p>Your tasks stay on your machine. No cloud sync, no vendor lock-in, complete control.</p>"},{"location":"#git-native-design","title":"Git-Native Design","text":"<p>Tasks are just Markdown files in a Git repo. Version control, collaboration, and history tracking built-in.</p>"},{"location":"#ai-collaboration","title":"AI Collaboration","text":"<p>Structured YAML + Markdown format makes tasks readable by both humans and LLMs. Zero-setup integration with Claude Code.</p>"},{"location":"#developer-control","title":"Developer Control","text":"<p>TaskGuard suggests, never decides. You're always in control of your workflow.</p>"},{"location":"#at-a-glance","title":"\ud83d\udcca At a Glance","text":"Feature Status Task Management \u2705 Create, list, update tasks Dependencies \u2705 Automatic blocking &amp; validation Git Sync \u2705 Commit analysis &amp; suggestions Quality Analysis \u2705 Complexity scoring &amp; linting AI Integration \u2705 Claude Code, natural language Security \u2705 17/17 tests passing Platforms \u2705 Linux, macOS, Windows, WSL"},{"location":"#quick-links","title":"\ud83d\udd17 Quick Links","text":"<ul> <li>GitHub: Guard8-ai/TaskGuard</li> <li>Issues: Report a bug</li> <li>License: MIT</li> <li>Version: 0.2.2</li> </ul>"},{"location":"#example-use-cases","title":"\ud83d\udca1 Example Use Cases","text":""},{"location":"#solo-developer","title":"Solo Developer","text":"<pre><code># Track personal project tasks\ntaskguard create --title \"Build API endpoint\" --area backend\ntaskguard validate  # See what's ready to work on\n</code></pre>"},{"location":"#team-collaboration","title":"Team Collaboration","text":"<pre><code># Tasks in Git - share via pull requests\ngit add tasks/\ngit commit -m \"Add authentication tasks\"\ngit push\n</code></pre>"},{"location":"#ai-assisted-development","title":"AI-Assisted Development","text":"<pre><code># Let AI help manage tasks\ntaskguard ai \"create tasks for user authentication feature\"\ntaskguard sync  # AI analyzes git commits\n</code></pre>"},{"location":"#next-steps","title":"\ud83d\ude80 Next Steps","text":"<p>Ready to dive in?</p> <ol> <li>Install TaskGuard</li> <li>Complete the 5-minute tutorial</li> <li>Learn core concepts</li> <li>Explore features</li> </ol> <p>Questions? Check the FAQ or open an issue.</p>"},{"location":"changelog/","title":"Changelog","text":"<p>TaskGuard version history and release notes.</p>"},{"location":"changelog/#v022-2025-10-05","title":"v0.2.2 (2025-10-05)","text":""},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>Unicode processing vulnerability</li> <li>UTF-8 safe truncation in context analysis</li> <li>Proper multi-byte character boundary handling</li> </ul>"},{"location":"changelog/#security","title":"Security","text":"<ul> <li>Enhanced security posture maintained</li> <li>All 17 security tests passing</li> <li>All 22 git analysis tests passing</li> </ul>"},{"location":"changelog/#v021-2025-09-30","title":"v0.2.1 (2025-09-30)","text":""},{"location":"changelog/#security-fixes","title":"Security Fixes","text":"<ul> <li>ReDoS Protection: Bounded regex patterns with timeout protection</li> <li>Memory Exhaustion Prevention: Strict limits (100 task IDs, 1MB messages)</li> <li>Path Traversal Protection: Repository access validation</li> <li>Input Validation: Enhanced Unicode normalization and control character sanitization</li> </ul>"},{"location":"changelog/#testing","title":"Testing","text":"<ul> <li>\u2705 17/17 security tests passing</li> <li>\u2705 22/22 git analysis tests passing</li> </ul>"},{"location":"changelog/#improvements","title":"Improvements","text":"<ul> <li>Performance optimization for large commit messages</li> <li>Improved confidence score integrity with bounds checking</li> <li>Concurrent access safety for Git operations</li> </ul>"},{"location":"changelog/#v020-initial-release","title":"v0.2.0 (Initial Release)","text":""},{"location":"changelog/#features","title":"Features","text":"<ul> <li>Task creation and management</li> <li>Dependency tracking and validation</li> <li>Git integration and sync</li> <li>Quality analysis (lint)</li> <li>AI integration support</li> <li>Multi-platform support (Linux, macOS, Windows, WSL)</li> </ul>"},{"location":"changelog/#next-steps","title":"Next Steps","text":"<p>See GitHub Releases for detailed release notes.</p>"},{"location":"faq/","title":"Frequently Asked Questions","text":"<p>Common questions about TaskGuard.</p>"},{"location":"faq/#general","title":"General","text":""},{"location":"faq/#what-is-taskguard","title":"What is TaskGuard?","text":"<p>TaskGuard is a local-first, Git-native task management system built in Rust.</p>"},{"location":"faq/#why-use-taskguard","title":"Why use TaskGuard?","text":"<ul> <li>\u2705 Local-first (no cloud)</li> <li>\u2705 Git-native (version controlled)</li> <li>\u2705 AI-ready (structured format)</li> <li>\u2705 Dependency tracking</li> <li>\u2705 Simple Markdown files</li> </ul>"},{"location":"faq/#is-it-free","title":"Is it free?","text":"<p>Yes, TaskGuard is open source (MIT license).</p>"},{"location":"faq/#technical","title":"Technical","text":""},{"location":"faq/#what-platforms-are-supported","title":"What platforms are supported?","text":"<p>Linux, macOS, Windows, and WSL.</p>"},{"location":"faq/#can-i-use-it-with-other-tools","title":"Can I use it with other tools?","text":"<p>Yes! Tasks are plain Markdown files. Edit with any text editor, process with scripts, integrate with CI/CD.</p>"},{"location":"faq/#how-do-i-backup-my-tasks","title":"How do I backup my tasks?","text":"<p>Tasks are in Git. Every commit is a backup. Use <code>git tag</code> for milestones.</p>"},{"location":"faq/#usage","title":"Usage","text":""},{"location":"faq/#how-do-i-share-tasks-with-my-team","title":"How do I share tasks with my team?","text":"<p>Use Git: <code>git push</code> to share, <code>git pull</code> to sync.</p>"},{"location":"faq/#can-i-customize-areasstatuses","title":"Can I customize areas/statuses?","text":"<p>Yes, edit <code>.taskguard/config.toml</code>.</p>"},{"location":"faq/#how-do-dependencies-work","title":"How do dependencies work?","text":"<p>Tasks with dependencies are blocked until all dependencies are <code>done</code>. Use <code>taskguard validate</code> to check.</p>"},{"location":"faq/#next-steps","title":"Next Steps","text":"<ul> <li>Getting Started</li> <li>Core Concepts</li> </ul>"},{"location":"api-reference/commands/","title":"API Reference: commands","text":"<p>Coming soon.</p>"},{"location":"api-reference/configuration/","title":"API Reference: configuration","text":"<p>Coming soon.</p>"},{"location":"api-reference/library-api/","title":"API Reference: library-api","text":"<p>Coming soon.</p>"},{"location":"api-reference/task-file-format/","title":"API Reference: task-file-format","text":"<p>Coming soon.</p>"},{"location":"contributing/code-standards/","title":"Contributing: code-standards","text":"<p>See README</p>"},{"location":"contributing/development-setup/","title":"Contributing: development-setup","text":"<p>See README</p>"},{"location":"contributing/testing/","title":"Contributing: testing","text":"<p>See README</p>"},{"location":"core-concepts/execution-model/","title":"Execution Model","text":"<p>Understand how TaskGuard manages task lifecycles and execution flow.</p>"},{"location":"core-concepts/execution-model/#task-lifecycle","title":"Task Lifecycle","text":"<p>Tasks progress through defined states from creation to completion:</p> <pre><code>graph LR\n    todo[todo] --&gt; doing[doing]\n    doing --&gt; review[review]\n    review --&gt; done[done]\n    doing --&gt; blocked[blocked]\n    review --&gt; doing\n    blocked --&gt; doing</code></pre>"},{"location":"core-concepts/execution-model/#status-definitions","title":"Status Definitions","text":"Status Meaning When to Use todo Not started Task created but work hasn't begun doing In progress Actively working on task review Under review Code/work ready for review done Completed Task finished and verified blocked Blocked Can't proceed due to dependencies or issues"},{"location":"core-concepts/execution-model/#dependency-driven-execution","title":"Dependency-Driven Execution","text":"<p>TaskGuard uses automatic dependency blocking to ensure tasks are completed in the correct order.</p>"},{"location":"core-concepts/execution-model/#how-it-works","title":"How It Works","text":"<ol> <li>Task A depends on Task B</li> <li>Task A is automatically blocked until Task B is <code>done</code></li> <li>When Task B completes \u2192 Task A becomes available</li> </ol>"},{"location":"core-concepts/execution-model/#example","title":"Example","text":"<pre><code># setup-001.md (no dependencies)\ndependencies: []\nstatus: todo\n\n# backend-001.md (depends on setup)\ndependencies: [setup-001]\nstatus: todo  # Blocked until setup-001 is done\n</code></pre> <p>Validation: <pre><code>taskguard validate\n</code></pre></p> <p>Output: <pre><code>\ud83d\udea6 TASK STATUS\n   \u2705 Available tasks (dependencies satisfied):\n      \u2b55 setup-001 - Project Setup\n\n   \ud83d\udeab Blocked tasks:\n      \u274c backend-001 - Backend API (waiting for: setup-001)\n</code></pre></p>"},{"location":"core-concepts/execution-model/#execution-workflows","title":"Execution Workflows","text":""},{"location":"core-concepts/execution-model/#sequential-workflow","title":"Sequential Workflow","text":"<p>Tasks completed one after another:</p> <pre><code>setup-001 \u2192 backend-001 \u2192 api-001 \u2192 testing-001\n</code></pre> <p>Setup: <pre><code># setup-001.md\ndependencies: []\n\n# backend-001.md\ndependencies: [setup-001]\n\n# api-001.md\ndependencies: [backend-001]\n\n# testing-001.md\ndependencies: [api-001]\n</code></pre></p> <p>Execution: 1. Start with <code>setup-001</code> (no dependencies) 2. Complete <code>setup-001</code> \u2192 <code>backend-001</code> becomes available 3. Complete <code>backend-001</code> \u2192 <code>api-001</code> becomes available 4. Complete <code>api-001</code> \u2192 <code>testing-001</code> becomes available</p>"},{"location":"core-concepts/execution-model/#parallel-workflow","title":"Parallel Workflow","text":"<p>Multiple tasks can run simultaneously:</p> <pre><code>        \u250c\u2500\u2192 frontend-001 \u2500\u2510\nsetup-001                 \u2192 integration-001\n        \u2514\u2500\u2192 backend-001 \u2500\u2500\u2518\n</code></pre> <p>Setup: <pre><code># frontend-001.md\ndependencies: [setup-001]\n\n# backend-001.md\ndependencies: [setup-001]\n\n# integration-001.md\ndependencies: [frontend-001, backend-001]\n</code></pre></p> <p>Execution: 1. Complete <code>setup-001</code> 2. Both <code>frontend-001</code> and <code>backend-001</code> become available 3. Work on them in parallel 4. When both complete \u2192 <code>integration-001</code> becomes available</p>"},{"location":"core-concepts/execution-model/#diamond-workflow","title":"Diamond Workflow","text":"<p>Complex dependency patterns:</p> <pre><code>           \u250c\u2500\u2192 task-B \u2500\u2510\ntask-A \u2500\u2500\u2192             \u251c\u2500\u2192 task-E\n           \u2514\u2500\u2192 task-C \u2500\u2518\n                 \u2502\n                 \u2193\n              task-D \u2500\u2500\u2518\n</code></pre> <p>Setup: <pre><code># task-B.md\ndependencies: [task-A]\n\n# task-C.md\ndependencies: [task-A]\n\n# task-D.md\ndependencies: [task-C]\n\n# task-E.md\ndependencies: [task-B, task-D]\n</code></pre></p>"},{"location":"core-concepts/execution-model/#status-transitions","title":"Status Transitions","text":""},{"location":"core-concepts/execution-model/#manual-transitions","title":"Manual Transitions","text":"<p>Update status via CLI:</p> <pre><code># Start work\ntaskguard update status backend-001 doing\n\n# Send for review\ntaskguard update status backend-001 review\n\n# Mark complete\ntaskguard update status backend-001 done\n\n# Block on issue\ntaskguard update status backend-001 blocked\n</code></pre>"},{"location":"core-concepts/execution-model/#git-based-suggestions","title":"Git-Based Suggestions","text":"<p>TaskGuard analyzes Git commits and suggests status updates:</p> <pre><code># Make commits with task IDs\ngit commit -m \"backend-001: Implement authentication logic\"\ngit commit -m \"backend-001: Add tests and documentation\"\n\n# Sync from Git\ntaskguard sync\n\n# TaskGuard suggests: backend-001 \u2192 done (confidence: 0.8)\n</code></pre> <p>Commit patterns analyzed: - <code>\"fix backend-001\"</code> \u2192 suggests <code>done</code> - <code>\"start backend-001\"</code> \u2192 suggests <code>doing</code> - <code>\"WIP backend-001\"</code> \u2192 suggests <code>doing</code> - Multiple commits \u2192 suggests <code>review</code></p>"},{"location":"core-concepts/execution-model/#blocking-behavior","title":"Blocking Behavior","text":""},{"location":"core-concepts/execution-model/#automatic-blocking","title":"Automatic Blocking","text":"<p>Tasks are automatically unavailable when dependencies aren't met:</p> <pre><code># api-001.md\ndependencies: [backend-001, auth-001]\n</code></pre> <p>Blocked if: - <code>backend-001</code> is NOT <code>done</code> OR - <code>auth-001</code> is NOT <code>done</code></p> <p>Available when: - <code>backend-001</code> is <code>done</code> AND - <code>auth-001</code> is <code>done</code></p>"},{"location":"core-concepts/execution-model/#manual-blocking","title":"Manual Blocking","text":"<p>Mark task as <code>blocked</code> for non-dependency reasons:</p> <pre><code>taskguard update status backend-001 blocked\n</code></pre> <p>Use cases: - Waiting for external input - Technical blocker discovered - Resource unavailable</p> <p>Add note in task file: <pre><code>## Updates\n- 2025-10-05: Blocked - Waiting for API key from vendor\n</code></pre></p>"},{"location":"core-concepts/execution-model/#validation-rules","title":"Validation Rules","text":""},{"location":"core-concepts/execution-model/#dependency-validation","title":"Dependency Validation","text":"<p><code>taskguard validate</code> checks:</p> <ol> <li> <p>Missing Dependencies <pre><code>dependencies: [nonexistent-001]\n</code></pre>    \u274c Error: <code>Depends on non-existent task</code></p> </li> <li> <p>Circular Dependencies <pre><code># A depends on B\n# B depends on A\n</code></pre>    \u274c Error: <code>Circular dependency detected</code></p> </li> <li> <p>Status Consistency</p> </li> <li>Task marked <code>done</code> but dependents still <code>todo</code> \u2192 Warning</li> </ol>"},{"location":"core-concepts/execution-model/#example-validation-output","title":"Example Validation Output","text":"<pre><code>taskguard validate\n</code></pre> <p>Success: <pre><code>\u2705 VALIDATION PASSED\n   No issues found in 15 tasks\n</code></pre></p> <p>Errors: <pre><code>\u274c VALIDATION FAILED\n\nDependency Issues:\n   \u274c api-001: Depends on missing task 'backend-099'\n   \u274c setup-002: Circular dependency (setup-002 \u2192 backend-001 \u2192 setup-002)\n\nParse Errors:\n   \u26a0\ufe0f  frontend-005.md: Invalid YAML front-matter\n\n\ud83d\udcca SUMMARY\n   Total tasks: 15\n   Available: 3\n   Blocked: 10\n   Parse errors: 1\n   Dependency issues: 2\n</code></pre></p>"},{"location":"core-concepts/execution-model/#concurrency-parallelism","title":"Concurrency &amp; Parallelism","text":""},{"location":"core-concepts/execution-model/#what-can-run-in-parallel","title":"What Can Run in Parallel","text":"<p>Tasks with no shared dependencies can run simultaneously:</p> <pre><code># These CAN run in parallel:\nbackend-001: dependencies: [setup-001]\nfrontend-001: dependencies: [setup-001]\n\n# They share setup-001 but don't depend on each other\n</code></pre>"},{"location":"core-concepts/execution-model/#what-cannot-run-in-parallel","title":"What Cannot Run in Parallel","text":"<p>Tasks with sequential dependencies must run in order:</p> <pre><code># These MUST run sequentially:\nsetup-001: dependencies: []\nbackend-001: dependencies: [setup-001]\napi-001: dependencies: [backend-001]\n\n# setup-001 \u2192 backend-001 \u2192 api-001 (sequential chain)\n</code></pre>"},{"location":"core-concepts/execution-model/#task-completion-criteria","title":"Task Completion Criteria","text":""},{"location":"core-concepts/execution-model/#when-to-mark-a-task-done","title":"When to Mark a Task <code>done</code>","text":"<p>\u2705 All checklist items completed <pre><code>## Tasks\n- [x] Install dependencies\n- [x] Implement feature\n- [x] Write tests\n- [x] Update documentation\n</code></pre></p> <p>\u2705 Acceptance criteria met <pre><code>## Acceptance Criteria\n\u2705 All tests passing\n\u2705 Code reviewed and approved\n\u2705 Documentation updated\n</code></pre></p> <p>\u2705 Changes committed to Git <pre><code>git commit -m \"backend-001: Complete authentication implementation\"\n</code></pre></p>"},{"location":"core-concepts/execution-model/#when-not-to-mark-done","title":"When NOT to Mark <code>done</code>","text":"<p>\u274c Work incomplete \u274c Tests failing \u274c Review not completed \u274c Acceptance criteria not met</p> <p>Use <code>review</code> status if implementation is done but needs approval.</p>"},{"location":"core-concepts/execution-model/#best-practices","title":"Best Practices","text":""},{"location":"core-concepts/execution-model/#1-small-focused-tasks","title":"1. Small, Focused Tasks","text":"<p>\u2705 \"Implement JWT authentication\" \u274c \"Build entire backend\"</p> <p>Why: Easier to track, test, and complete</p>"},{"location":"core-concepts/execution-model/#2-clear-dependencies","title":"2. Clear Dependencies","text":"<p>\u2705 Explicit: <code>dependencies: [setup-001, config-001]</code> \u274c Implicit: Assumed but not declared</p> <p>Why: Prevents parallel work on dependent tasks</p>"},{"location":"core-concepts/execution-model/#3-granular-status-updates","title":"3. Granular Status Updates","text":"<p>\u2705 Update status as work progresses \u274c Leave as <code>todo</code> until 100% done</p> <p>Why: Better visibility into progress</p>"},{"location":"core-concepts/execution-model/#4-use-checklist-items","title":"4. Use Checklist Items","text":"<pre><code>## Tasks\n- [x] Phase 1: Setup\n- [ ] Phase 2: Implementation\n- [ ] Phase 3: Testing\n</code></pre> <p>Update via CLI: <pre><code>taskguard task update backend-001 1 done\n</code></pre></p>"},{"location":"core-concepts/execution-model/#execution-examples","title":"Execution Examples","text":""},{"location":"core-concepts/execution-model/#example-1-feature-development","title":"Example 1: Feature Development","text":"<pre><code>graph LR\n    design[Design] --&gt; backend[Backend API]\n    design --&gt; frontend[Frontend UI]\n    backend --&gt; integration[Integration]\n    frontend --&gt; integration\n    integration --&gt; testing[Testing]\n    testing --&gt; deployment[Deployment]</code></pre> <p>Workflow: 1. Complete design spec (<code>design-001</code>) 2. Parallel: Backend (<code>backend-001</code>) + Frontend (<code>frontend-001</code>) 3. Integration tests (<code>testing-001</code>) after both complete 4. Deploy (<code>deployment-001</code>) after tests pass</p>"},{"location":"core-concepts/execution-model/#example-2-bug-fix","title":"Example 2: Bug Fix","text":"<pre><code># bug-001.md\nstatus: todo \u2192 doing \u2192 done\n\n# No dependencies\n# Direct: todo \u2192 doing \u2192 done\n</code></pre> <p>Workflow: 1. Create bug task 2. Update to <code>doing</code> while investigating 3. Fix and test 4. Mark <code>done</code></p>"},{"location":"core-concepts/execution-model/#next-steps","title":"Next Steps","text":"<ul> <li>State Management - How TaskGuard persists state</li> <li>Dependencies Guide - Advanced dependency patterns</li> <li>Git Sync - Automate status updates</li> </ul>"},{"location":"core-concepts/state-management/","title":"State Management","text":"<p>Learn how TaskGuard stores and manages task state locally and in Git.</p>"},{"location":"core-concepts/state-management/#local-first-architecture","title":"Local-First Architecture","text":"<p>TaskGuard follows a local-first philosophy:</p> <ul> <li>\u2705 All data stays on your machine</li> <li>\u2705 No cloud sync required</li> <li>\u2705 No network dependencies</li> <li>\u2705 Complete data ownership</li> </ul>"},{"location":"core-concepts/state-management/#file-system-structure","title":"File System Structure","text":"<p>TaskGuard uses your project's file system for all state:</p> <pre><code>my-project/\n\u251c\u2500\u2500 .taskguard/                # TaskGuard configuration\n\u2502   \u251c\u2500\u2500 config.toml           # Project settings\n\u2502   \u251c\u2500\u2500 templates/            # Task templates\n\u2502   \u2514\u2500\u2500 state/                # Local state (gitignored)\n\u2502\n\u251c\u2500\u2500 tasks/                    # Task files (version controlled)\n\u2502   \u251c\u2500\u2500 setup/\n\u2502   \u2502   \u251c\u2500\u2500 setup-001.md\n\u2502   \u2502   \u2514\u2500\u2500 setup-002.md\n\u2502   \u251c\u2500\u2500 backend/\n\u2502   \u2502   \u251c\u2500\u2500 backend-001.md\n\u2502   \u2502   \u2514\u2500\u2500 backend-002.md\n\u2502   \u2514\u2500\u2500 [other areas]/\n\u2502\n\u2514\u2500\u2500 .git/                     # Git repository\n</code></pre>"},{"location":"core-concepts/state-management/#configuration-state","title":"Configuration State","text":""},{"location":"core-concepts/state-management/#taskguardconfigtoml","title":"<code>.taskguard/config.toml</code>","text":"<p>Project-level configuration (committed to Git):</p> <pre><code>[project]\nname = \"My Project\"\nversion = \"0.2.2\"\nareas = [\"setup\", \"backend\", \"frontend\", \"api\", \"auth\", \"testing\"]\n\n[settings]\nstatuses = [\"todo\", \"doing\", \"review\", \"done\", \"blocked\"]\npriorities = [\"low\", \"medium\", \"high\", \"critical\"]\ncomplexity_scale = \"1-10\"\ndefault_estimate_unit = \"hours\"\n\n[git]\nauto_add_tasks = true\nauto_commit_on_status_change = false\n\n[ai]\nenabled = true\nclaude_code_integration = true\n</code></pre> <p>Why it's versioned: - Team members share same configuration - Areas and statuses consistent across team - Settings travel with the project</p>"},{"location":"core-concepts/state-management/#task-state","title":"Task State","text":""},{"location":"core-concepts/state-management/#task-files-tasks","title":"Task Files (<code>tasks/</code>)","text":"<p>Each task is a Markdown file with YAML metadata:</p> <p>Location: <code>tasks/{area}/{id}.md</code></p> <p>State stored: - Task metadata (YAML front-matter) - Task content (Markdown body) - Checklist item status - Dependency relationships</p> <p>Example: <pre><code>---\nid: backend-001\ntitle: \"Implement auth\"\nstatus: doing          # \u2190 Current state\npriority: high\ndependencies: [setup-001]  # \u2190 Relationship state\n---\n\n# Markdown content with current notes\n</code></pre></p> <p>Why files: - \u2705 Human-readable - \u2705 Git-trackable - \u2705 Editable with any text editor - \u2705 Diffable for collaboration - \u2705 No database required</p>"},{"location":"core-concepts/state-management/#local-state-not-versioned","title":"Local State (Not Versioned)","text":""},{"location":"core-concepts/state-management/#taskguardstate","title":"<code>.taskguard/state/</code>","text":"<p>Gitignored - local-only state:</p> <pre><code>.taskguard/state/\n\u251c\u2500\u2500 cache/                  # Performance caches\n\u251c\u2500\u2500 last_sync.json         # Last git sync timestamp\n\u2514\u2500\u2500 user_prefs.json        # User-specific settings\n</code></pre> <p>Why gitignored: - User-specific preferences - Machine-specific caches - Not shared across team</p>"},{"location":"core-concepts/state-management/#git-integration","title":"Git Integration","text":"<p>TaskGuard is Git-native - it uses Git as the persistence and collaboration layer.</p>"},{"location":"core-concepts/state-management/#whats-in-git","title":"What's in Git","text":"<p>Versioned: <pre><code>.taskguard/config.toml     \u2705 Shared configuration\n.taskguard/templates/      \u2705 Shared templates\ntasks/**/*.md              \u2705 All task files\nAGENTIC_AI_TASKGUARD_GUIDE.md  \u2705 AI guides\n</code></pre></p> <p>Gitignored: <pre><code>.taskguard/state/          \u274c Local state\nAI_AGENT_SETUP_NOTIFICATION.md  \u274c Setup notification (deletable)\n</code></pre></p>"},{"location":"core-concepts/state-management/#benefits-of-git-storage","title":"Benefits of Git Storage","text":"<ol> <li> <p>Version History <pre><code>git log tasks/backend/backend-001.md\n# See complete task history\n</code></pre></p> </li> <li> <p>Collaboration <pre><code>git push  # Share tasks with team\ngit pull  # Get team's tasks\n</code></pre></p> </li> <li> <p>Branching <pre><code>git checkout -b feature/new-tasks\n# Work on tasks in isolation\n</code></pre></p> </li> <li> <p>Conflict Resolution <pre><code># Git handles conflicts in task files\n# Resolve manually when needed\n</code></pre></p> </li> </ol>"},{"location":"core-concepts/state-management/#state-persistence","title":"State Persistence","text":""},{"location":"core-concepts/state-management/#how-state-is-saved","title":"How State is Saved","text":"<p>Task Creation: <pre><code>taskguard create --title \"Task\" --area backend\n</code></pre> 1. Generate unique ID 2. Create YAML + Markdown file 3. Write to <code>tasks/backend/backend-NNN.md</code> 4. File is now the source of truth</p> <p>Task Update: <pre><code>taskguard update status backend-001 doing\n</code></pre> 1. Read <code>tasks/backend/backend-001.md</code> 2. Parse YAML front-matter 3. Update <code>status</code> field 4. Write back to file</p> <p>No Database: - State lives in text files - Changes are atomic file writes - No separate database to corrupt or sync</p>"},{"location":"core-concepts/state-management/#state-synchronization","title":"State Synchronization","text":""},{"location":"core-concepts/state-management/#team-collaboration","title":"Team Collaboration","text":"<p>Workflow:</p> <ol> <li> <p>Alice creates tasks: <pre><code>taskguard create --title \"API endpoint\" --area backend\ngit add tasks/\ngit commit -m \"Add backend tasks\"\ngit push\n</code></pre></p> </li> <li> <p>Bob pulls tasks: <pre><code>git pull\ntaskguard list  # Sees Alice's tasks\n</code></pre></p> </li> <li> <p>Bob updates task: <pre><code>taskguard update status backend-001 doing\ngit add tasks/backend/backend-001.md\ngit commit -m \"Start working on backend-001\"\ngit push\n</code></pre></p> </li> <li> <p>Alice syncs: <pre><code>git pull\ntaskguard list --status doing  # Sees Bob's update\n</code></pre></p> </li> </ol>"},{"location":"core-concepts/state-management/#conflict-resolution","title":"Conflict Resolution","text":"<p>Scenario: Alice and Bob both edit <code>backend-001.md</code></p> <p>Git merge conflict: <pre><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\nstatus: review\n=======\nstatus: doing\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; alice/update\n</code></pre></p> <p>Resolution: <pre><code># Manual resolution\nvim tasks/backend/backend-001.md\n# Choose correct status\n\ngit add tasks/backend/backend-001.md\ngit commit -m \"Resolve status conflict\"\n</code></pre></p> <p>TaskGuard philosophy: Surfaces conflicts, doesn't auto-resolve. Developer decides.</p>"},{"location":"core-concepts/state-management/#state-consistency","title":"State Consistency","text":""},{"location":"core-concepts/state-management/#validation","title":"Validation","text":"<p>TaskGuard validates state on every operation:</p> <pre><code>taskguard validate\n</code></pre> <p>Checks: 1. All task files have valid YAML 2. Dependencies reference existing tasks 3. No circular dependencies 4. IDs match filenames</p> <p>Repairs: - Parse errors \u2192 Skip file, warn user - Missing dependencies \u2192 Flag as error - Circular deps \u2192 Flag as error</p> <p>No auto-fix: TaskGuard reports issues, you fix them.</p>"},{"location":"core-concepts/state-management/#state-queries","title":"State Queries","text":""},{"location":"core-concepts/state-management/#reading-state","title":"Reading State","text":"<p>All tasks: <pre><code>taskguard list\n</code></pre> - Walks <code>tasks/</code> directory - Parses all <code>.md</code> files - Builds in-memory task graph</p> <p>Filtered: <pre><code>taskguard list --area backend --status todo\n</code></pre> - Same process, apply filters</p> <p>Validation: <pre><code>taskguard validate\n</code></pre> - Load all tasks - Build dependency graph - Analyze for issues</p> <p>Performance: O(n) for n tasks. Fast even for 1000+ tasks.</p>"},{"location":"core-concepts/state-management/#state-modifications","title":"State Modifications","text":""},{"location":"core-concepts/state-management/#task-updates","title":"Task Updates","text":"<p>Status change: <pre><code>taskguard update status backend-001 done\n</code></pre></p> <p>Process: 1. Load <code>tasks/backend/backend-001.md</code> 2. Parse YAML 3. Update <code>status: todo</code> \u2192 <code>status: done</code> 4. Serialize YAML 5. Write file</p> <p>Atomic: File write is atomic. No partial updates.</p>"},{"location":"core-concepts/state-management/#bulk-operations","title":"Bulk Operations","text":"<p>Not supported: TaskGuard doesn't support bulk updates.</p> <p>Why: Prevents accidental data loss. You update one task at a time.</p> <p>Workaround for bulk: <pre><code># Use shell loops\nfor id in backend-001 backend-002 backend-003; do\n  taskguard update status $id done\ndone\n</code></pre></p>"},{"location":"core-concepts/state-management/#state-backup-recovery","title":"State Backup &amp; Recovery","text":""},{"location":"core-concepts/state-management/#backup-strategy","title":"Backup Strategy","text":"<p>Git is your backup: <pre><code># Every commit is a backup\ngit log --oneline tasks/\n\n# Restore to any point\ngit checkout &lt;commit&gt; tasks/\n</code></pre></p> <p>Manual backup: <pre><code># Copy tasks directory\ncp -r tasks/ tasks-backup-$(date +%Y%m%d)\n\n# Or create git tag\ngit tag -a v1.0-tasks -m \"Backup before refactor\"\n</code></pre></p>"},{"location":"core-concepts/state-management/#recovery","title":"Recovery","text":"<p>Undo last change: <pre><code>git checkout HEAD tasks/backend/backend-001.md\n</code></pre></p> <p>Restore deleted task: <pre><code>git log --all --full-history -- tasks/backend/backend-001.md\ngit checkout &lt;commit&gt; -- tasks/backend/backend-001.md\n</code></pre></p> <p>Restore entire state: <pre><code>git checkout &lt;commit&gt; tasks/\n</code></pre></p>"},{"location":"core-concepts/state-management/#state-migration","title":"State Migration","text":""},{"location":"core-concepts/state-management/#upgrading-taskguard","title":"Upgrading TaskGuard","text":"<p>Minor versions (0.2.x \u2192 0.2.y): - State format unchanged - No migration needed</p> <p>Major versions (0.2.x \u2192 0.3.0): - May include migration script - Run: <code>taskguard migrate</code> - Always backup first: <code>git tag pre-migration</code></p>"},{"location":"core-concepts/state-management/#performance-considerations","title":"Performance Considerations","text":""},{"location":"core-concepts/state-management/#scalability","title":"Scalability","text":"<p>Number of tasks: - \u2705 1-100 tasks: Instant - \u2705 100-1000 tasks: Fast (&lt;100ms) - \u26a0\ufe0f 1000+ tasks: Slower (still &lt;1s)</p> <p>Optimization: - TaskGuard caches file reads - Parallel I/O where possible - Lazy loading for large repos</p>"},{"location":"core-concepts/state-management/#file-size","title":"File Size","text":"<p>Recommended task file size: &lt;50KB</p> <p>Large tasks: - Split into multiple tasks - Move detailed docs to separate files - Link from task file</p>"},{"location":"core-concepts/state-management/#state-debugging","title":"State Debugging","text":""},{"location":"core-concepts/state-management/#inspect-state","title":"Inspect State","text":"<p>Check task file: <pre><code>cat tasks/backend/backend-001.md\n</code></pre></p> <p>Validate YAML: <pre><code>taskguard validate\n</code></pre></p> <p>Git history: <pre><code>git log -p tasks/backend/backend-001.md\n</code></pre></p>"},{"location":"core-concepts/state-management/#common-issues","title":"Common Issues","text":"<p>Parse error: <pre><code>taskguard list\n# Warning: Skipping tasks/backend/backend-001.md: Invalid YAML\n</code></pre></p> <p>Fix: Check YAML syntax, ensure <code>---</code> delimiters</p> <p>Missing dependency: <pre><code>taskguard validate\n# Error: backend-001 depends on missing task 'setup-099'\n</code></pre></p> <p>Fix: Update <code>dependencies</code> or create missing task</p>"},{"location":"core-concepts/state-management/#best-practices","title":"Best Practices","text":""},{"location":"core-concepts/state-management/#1-commit-tasks-frequently","title":"1. Commit Tasks Frequently","text":"<pre><code>git add tasks/\ngit commit -m \"Add authentication tasks\"\n</code></pre>"},{"location":"core-concepts/state-management/#2-use-branches-for-experiments","title":"2. Use Branches for Experiments","text":"<pre><code>git checkout -b task-reorganization\n# Modify tasks\n# Merge or discard\n</code></pre>"},{"location":"core-concepts/state-management/#3-tag-milestones","title":"3. Tag Milestones","text":"<pre><code>git tag -a v1.0-complete -m \"All v1.0 tasks done\"\n</code></pre>"},{"location":"core-concepts/state-management/#4-regular-validation","title":"4. Regular Validation","text":"<pre><code>taskguard validate\n# Run before commits\n</code></pre>"},{"location":"core-concepts/state-management/#5-small-task-files","title":"5. Small Task Files","text":"<ul> <li>Keep under 50KB</li> <li>Split large tasks</li> <li>Link to external docs</li> </ul>"},{"location":"core-concepts/state-management/#next-steps","title":"Next Steps","text":"<ul> <li>Task Structure - Understand task file format</li> <li>Dependencies - Master dependency management</li> <li>Git Sync - Automate with Git integration</li> </ul>"},{"location":"core-concepts/task-structure/","title":"Task Structure","text":"<p>Learn how TaskGuard tasks are structured and organized.</p>"},{"location":"core-concepts/task-structure/#file-format","title":"File Format","text":"<p>TaskGuard tasks are Markdown files with YAML front-matter, combining structured metadata with human-readable content.</p> <p>File location: <code>tasks/{area}/{id}.md</code></p> <p>Example: <code>tasks/backend/backend-001.md</code></p>"},{"location":"core-concepts/task-structure/#anatomy-of-a-task-file","title":"Anatomy of a Task File","text":"<pre><code>---\nid: backend-001                    # Unique task ID\ntitle: \"Implement user auth\"       # Task title\nstatus: todo                       # Current status\npriority: high                     # Priority level\ntags: [backend, security]          # Tags for categorization\ndependencies: [setup-001]          # Task dependencies\nassignee: developer                # Who's working on it\ncreated: 2025-10-05T10:00:00Z     # Creation timestamp\nestimate: 4h                       # Time estimate\ncomplexity: 6                      # Complexity score (1-10)\narea: backend                      # Task area\n---\n\n# Implement user authentication\n\n## Context\nThe application needs secure user authentication using JWT tokens.\n\n## Objectives\n- Implement JWT token generation\n- Create login endpoint\n- Add authentication middleware\n\n## Tasks\n- [ ] Install JWT libraries\n- [ ] Create auth middleware\n- [ ] Implement login endpoint\n- [ ] Write tests\n\n## Acceptance Criteria\n\u2705 **Security:**\n- Passwords hashed with bcrypt\n- JWT tokens expire after 24h\n- Invalid tokens rejected with 401\n</code></pre>"},{"location":"core-concepts/task-structure/#required-fields","title":"Required Fields","text":""},{"location":"core-concepts/task-structure/#id-string","title":"<code>id</code> (String)","text":"<p>Format: <code>{area}-{number}</code> Example: <code>backend-001</code>, <code>frontend-042</code></p> <ul> <li>Auto-generated by <code>taskguard create</code></li> <li>Unique within project</li> <li>Used for dependencies and references</li> <li>Three-digit zero-padded number</li> </ul>"},{"location":"core-concepts/task-structure/#title-string","title":"<code>title</code> (String)","text":"<p>Example: <code>\"Implement user authentication\"</code></p> <ul> <li>Brief, descriptive task name</li> <li>Shown in task lists</li> <li>Should be action-oriented</li> </ul>"},{"location":"core-concepts/task-structure/#area-string","title":"<code>area</code> (String)","text":"<p>Options: <code>setup</code>, <code>backend</code>, <code>frontend</code>, <code>api</code>, <code>auth</code>, <code>testing</code>, <code>deployment</code></p> <ul> <li>Organizational category</li> <li>Determines subdirectory</li> <li>Configurable in <code>.taskguard/config.toml</code></li> </ul>"},{"location":"core-concepts/task-structure/#optional-fields","title":"Optional Fields","text":""},{"location":"core-concepts/task-structure/#status-enum","title":"<code>status</code> (Enum)","text":"<p>Options: - <code>todo</code> - Not started (default) - <code>doing</code> - In progress - <code>review</code> - Under review - <code>done</code> - Completed - <code>blocked</code> - Blocked by dependencies or issues</p> <p>Usage: <pre><code>taskguard update status backend-001 doing\n</code></pre></p>"},{"location":"core-concepts/task-structure/#priority-enum","title":"<code>priority</code> (Enum)","text":"<p>Options: - <code>low</code> - Nice to have - <code>medium</code> - Normal priority (default) - <code>high</code> - Important - <code>critical</code> - Urgent/blocking</p> <p>Visual indicators: - \ud83d\udd34 Critical - \ud83d\udfe0 High - \ud83d\udfe1 Medium - \u26aa Low</p>"},{"location":"core-concepts/task-structure/#tags-array","title":"<code>tags</code> (Array)","text":"<p>Example: <code>[backend, security, auth]</code></p> <ul> <li>Used for categorization</li> <li>Searchable and filterable</li> <li>Free-form strings</li> </ul>"},{"location":"core-concepts/task-structure/#dependencies-array","title":"<code>dependencies</code> (Array)","text":"<p>Example: <code>[setup-001, backend-002]</code></p> <ul> <li>List of task IDs this task depends on</li> <li>Enables dependency blocking</li> <li>Validated by <code>taskguard validate</code></li> </ul> <p>Example: <pre><code>dependencies: [setup-001, config-001]\n</code></pre></p> <p>This task is blocked until both <code>setup-001</code> AND <code>config-001</code> are <code>done</code>.</p>"},{"location":"core-concepts/task-structure/#assignee-string","title":"<code>assignee</code> (String)","text":"<p>Example: <code>\"developer\"</code> or <code>\"alice@example.com\"</code></p> <ul> <li>Who's responsible for the task</li> <li>Free-form string</li> <li>Optional</li> </ul>"},{"location":"core-concepts/task-structure/#created-datetime","title":"<code>created</code> (DateTime)","text":"<p>Format: ISO 8601 Example: <code>2025-10-05T10:00:00Z</code></p> <ul> <li>Auto-generated on creation</li> <li>Immutable</li> <li>Used for sorting and history</li> </ul>"},{"location":"core-concepts/task-structure/#estimate-string","title":"<code>estimate</code> (String)","text":"<p>Example: <code>\"4h\"</code>, <code>\"2d\"</code>, <code>\"1w\"</code></p> <ul> <li>Time estimate (free-form)</li> <li>Not enforced</li> <li>For planning purposes</li> </ul>"},{"location":"core-concepts/task-structure/#complexity-number","title":"<code>complexity</code> (Number)","text":"<p>Range: 1-10 Example: <code>6</code></p> <ul> <li>Subjective complexity score</li> <li>Default: <code>3</code></li> <li>Used by <code>taskguard lint</code> for analysis</li> </ul>"},{"location":"core-concepts/task-structure/#markdown-content","title":"Markdown Content","text":"<p>The content after the YAML front-matter is free-form Markdown.</p>"},{"location":"core-concepts/task-structure/#recommended-sections","title":"Recommended Sections","text":""},{"location":"core-concepts/task-structure/#context","title":"<code>## Context</code>","text":"<p>Why this task exists and what problem it solves.</p> <pre><code>## Context\nCurrent state: Basic auth exists but uses plain passwords.\nNeed to: Implement JWT-based authentication for API security.\n</code></pre>"},{"location":"core-concepts/task-structure/#objectives","title":"<code>## Objectives</code>","text":"<p>What you aim to accomplish.</p> <pre><code>## Objectives\n- Replace password-based auth with JWT\n- Support token refresh\n- Add role-based permissions\n</code></pre>"},{"location":"core-concepts/task-structure/#tasks","title":"<code>## Tasks</code>","text":"<p>Checklist of specific work items.</p> <pre><code>## Tasks\n- [ ] Install jsonwebtoken package\n- [ ] Create JWT signing function\n- [ ] Implement /auth/login endpoint\n- [ ] Add token validation middleware\n</code></pre> <p>Update checklist items: <pre><code>taskguard task update backend-001 1 done\n</code></pre></p>"},{"location":"core-concepts/task-structure/#acceptance-criteria","title":"<code>## Acceptance Criteria</code>","text":"<p>How you know the task is complete.</p> <pre><code>## Acceptance Criteria\n\u2705 **Login Success:**\n- User can login with email/password\n- Server returns valid JWT\n- Token contains user ID and role\n\n\u2705 **Security:**\n- Passwords hashed with bcrypt\n- Tokens expire after 24h\n</code></pre>"},{"location":"core-concepts/task-structure/#technical-notes","title":"<code>## Technical Notes</code>","text":"<p>Implementation details and decisions.</p> <pre><code>## Technical Notes\n- Use RS256 algorithm for JWT\n- Store secret in environment variable\n- Token payload: {userId, role, exp}\n</code></pre>"},{"location":"core-concepts/task-structure/#updates","title":"<code>## Updates</code>","text":"<p>Change log for the task.</p> <pre><code>## Updates\n- 2025-10-05: Task created\n- 2025-10-06: Started implementation\n- 2025-10-07: Completed and tested\n</code></pre>"},{"location":"core-concepts/task-structure/#file-organization","title":"File Organization","text":"<pre><code>tasks/\n\u251c\u2500\u2500 setup/\n\u2502   \u251c\u2500\u2500 setup-001.md\n\u2502   \u251c\u2500\u2500 setup-002.md\n\u2502   \u2514\u2500\u2500 setup-003.md\n\u251c\u2500\u2500 backend/\n\u2502   \u251c\u2500\u2500 backend-001.md\n\u2502   \u251c\u2500\u2500 backend-002.md\n\u2502   \u2514\u2500\u2500 backend-003.md\n\u251c\u2500\u2500 frontend/\n\u2502   \u2514\u2500\u2500 frontend-001.md\n\u2514\u2500\u2500 api/\n    \u2514\u2500\u2500 api-001.md\n</code></pre> <p>Rules: - One task per file - Files organized by area - ID matches filename: <code>backend-001.md</code> contains <code>id: backend-001</code></p>"},{"location":"core-concepts/task-structure/#id-generation","title":"ID Generation","text":"<p>IDs are auto-generated by <code>taskguard create</code>:</p> <ol> <li>Determine area: From <code>--area</code> flag or default</li> <li>Find highest number: In that area's directory</li> <li>Increment: Next number in sequence</li> <li>Format: <code>{area}-{number:03d}</code></li> </ol> <p>Example: <pre><code># Existing: backend-001.md, backend-002.md\ntaskguard create --title \"New task\" --area backend\n# Creates: backend-003.md with id: backend-003\n</code></pre></p>"},{"location":"core-concepts/task-structure/#best-practices","title":"Best Practices","text":""},{"location":"core-concepts/task-structure/#task-titles","title":"Task Titles","text":"<p>\u2705 Good: - \"Implement user authentication\" - \"Fix database connection pooling\" - \"Add dark mode to settings\"</p> <p>\u274c Bad: - \"Auth\" (too vague) - \"Stuff to do\" (not descriptive) - \"Investigate issue\" (unclear outcome)</p>"},{"location":"core-concepts/task-structure/#task-size","title":"Task Size","text":"<ul> <li>Sweet spot: 2-8 hours of work</li> <li>Too small: \"Change button color\" \u2192 Combine with other UI tasks</li> <li>Too large: \"Build entire backend\" \u2192 Break into multiple tasks</li> </ul>"},{"location":"core-concepts/task-structure/#dependencies","title":"Dependencies","text":"<ul> <li>Only depend on tasks in the same project</li> <li>Avoid circular dependencies (A \u2192 B \u2192 A)</li> <li>Keep dependency chains manageable (&lt;5 levels deep)</li> </ul>"},{"location":"core-concepts/task-structure/#markdown-content_1","title":"Markdown Content","text":"<ul> <li>Keep it concise (1-2 pages max)</li> <li>Use bullet lists for scannability</li> <li>Include code examples where helpful</li> <li>Update <code>## Updates</code> section when making changes</li> </ul>"},{"location":"core-concepts/task-structure/#editing-tasks","title":"Editing Tasks","text":""},{"location":"core-concepts/task-structure/#via-file-system","title":"Via File System","text":"<pre><code>vim tasks/backend/backend-001.md\n</code></pre> <p>Edit YAML and Markdown directly.</p>"},{"location":"core-concepts/task-structure/#via-cli","title":"Via CLI","text":"<pre><code># Update status\ntaskguard update status backend-001 doing\n\n# Update priority\ntaskguard update priority backend-001 critical\n\n# Update dependencies\ntaskguard update dependencies backend-001 \"setup-001,config-001\"\n\n# Update checklist item\ntaskguard task update backend-001 1 done\n</code></pre>"},{"location":"core-concepts/task-structure/#validation","title":"Validation","text":"<p>TaskGuard validates task files on every command:</p> <pre><code>taskguard validate\n</code></pre> <p>Checks: - Valid YAML front-matter - Required fields present - Dependencies exist - No circular dependencies - ID matches filename</p> <p>Errors: <pre><code>\u274c backend-001: Missing required field 'title'\n\u274c api-001: Depends on non-existent task 'backend-099'\n\u274c setup-002: Circular dependency detected (setup-002 \u2192 backend-001 \u2192 setup-002)\n</code></pre></p>"},{"location":"core-concepts/task-structure/#next-steps","title":"Next Steps","text":"<ul> <li>Execution Model - Task lifecycle and status flow</li> <li>State Management - How TaskGuard stores state</li> <li>Dependencies - Deep dive into dependency management</li> </ul>"},{"location":"features/advanced-config/","title":"advanced-config","text":"<p>See Task Management for core features.</p>"},{"location":"features/ai-integration/","title":"ai-integration","text":"<p>See Task Management for core features.</p>"},{"location":"features/dependencies/","title":"dependencies","text":"<p>See Task Management for core features.</p>"},{"location":"features/git-sync/","title":"git-sync","text":"<p>See Task Management for core features.</p>"},{"location":"features/quality-analysis/","title":"quality-analysis","text":"<p>See Task Management for core features.</p>"},{"location":"features/task-management/","title":"Task Management","text":"<p>Core task management commands and workflows.</p>"},{"location":"features/task-management/#commands-overview","title":"Commands Overview","text":"Command Purpose <code>taskguard create</code> Create new task <code>taskguard list</code> List tasks <code>taskguard update</code> Update task fields <code>taskguard task update</code> Update checklist items <code>taskguard validate</code> Check dependencies"},{"location":"features/task-management/#creating-tasks","title":"Creating Tasks","text":"<pre><code># Basic creation\ntaskguard create --title \"Task title\" --area backend\n\n# With priority\ntaskguard create --title \"Critical fix\" --area backend --priority critical\n\n# Different areas\ntaskguard create --title \"UI component\" --area frontend --priority high\n</code></pre> <p>Auto-generated: - Unique ID (<code>backend-001</code>, <code>frontend-001</code>, etc.) - Timestamp - Default status (<code>todo</code>) - Task file in <code>tasks/{area}/{id}.md</code></p>"},{"location":"features/task-management/#listing-tasks","title":"Listing Tasks","text":"<pre><code># All tasks\ntaskguard list\n\n# Filter by area\ntaskguard list --area backend\n\n# Filter by status\ntaskguard list --status doing\n\n# Combined filters\ntaskguard list --area frontend --status todo\n</code></pre>"},{"location":"features/task-management/#updating-tasks","title":"Updating Tasks","text":""},{"location":"features/task-management/#status","title":"Status","text":"<pre><code>taskguard update status backend-001 doing\ntaskguard update status backend-001 review\ntaskguard update status backend-001 done\n</code></pre>"},{"location":"features/task-management/#priority","title":"Priority","text":"<pre><code>taskguard update priority backend-001 critical\n</code></pre>"},{"location":"features/task-management/#dependencies","title":"Dependencies","text":"<pre><code>taskguard update dependencies backend-001 \"setup-001,config-001\"\n</code></pre>"},{"location":"features/task-management/#assignee","title":"Assignee","text":"<pre><code>taskguard update assignee backend-001 \"alice@example.com\"\n</code></pre>"},{"location":"features/task-management/#checklist-management","title":"Checklist Management","text":"<pre><code># Mark first item done\ntaskguard task update backend-001 1 done\n\n# Mark second item done\ntaskguard task update backend-001 2 done\n\n# Mark item as todo\ntaskguard task update backend-001 3 todo\n</code></pre>"},{"location":"features/task-management/#next-steps","title":"Next Steps","text":"<ul> <li>Dependencies - Manage task dependencies</li> <li>Git Sync - Git integration</li> </ul>"},{"location":"getting-started/first-task/","title":"First Task Tutorial","text":"<p>Create and manage your first task with TaskGuard in under 5 minutes.</p>"},{"location":"getting-started/first-task/#step-1-initialize-project","title":"Step 1: Initialize Project","text":"<p>Navigate to your project directory and initialize TaskGuard:</p> <pre><code>cd ~/my-project\ntaskguard init\n</code></pre> <p>Output: <pre><code>\ud83d\ude80 Initializing TaskGuard...\n\ud83d\udcdd Created example task: tasks/setup/001-project-setup.md\n\u2705 TaskGuard initialized successfully!\n\n\ud83d\udcc1 Created directories:\n   .taskguard/         # Configuration and state\n   tasks/              # Task files organized by area\n   tasks/setup/\n   tasks/backend/\n   tasks/frontend/\n   tasks/api/\n   tasks/auth/\n   tasks/testing/\n\n\ud83e\udd16 AI Agent Integration:\n   AGENTIC_AI_TASKGUARD_GUIDE.md    # AI collaboration guide\n   AI_AGENT_SETUP_NOTIFICATION.md   # Setup instructions\n</code></pre></p> <p>What happened: - Created <code>.taskguard/</code> configuration directory - Created <code>tasks/</code> directory with area subdirectories - Generated example task - Set up AI integration files - Updated <code>.gitignore</code></p>"},{"location":"getting-started/first-task/#step-2-create-your-first-task","title":"Step 2: Create Your First Task","text":"<p>Create a high-priority task for setting up a database:</p> <pre><code>taskguard create --title \"Setup PostgreSQL database\" --area backend --priority high\n</code></pre> <p>Output: <pre><code>\u2705 Created task: backend/backend-001.md\n   ID: backend-001\n   Title: Setup PostgreSQL database\n   Area: backend\n   Priority: high\n\n\ud83d\udcdd Next steps:\n   taskguard show backend-001  # View task details\n   Edit the file to add more details\n</code></pre></p> <p>What was created: - File: <code>tasks/backend/backend-001.md</code> - Unique ID: <code>backend-001</code> (area-number format) - Status: <code>todo</code> (default) - Priority: <code>high</code> - Timestamp: Auto-generated</p>"},{"location":"getting-started/first-task/#step-3-view-your-tasks","title":"Step 3: View Your Tasks","text":"<p>List all tasks:</p> <pre><code>taskguard list\n</code></pre> <p>Output: <pre><code>\ud83d\udcc1 BACKEND\n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n   \u2b55 \ud83d\udfe0 backend-001 Setup PostgreSQL database\n\n\ud83d\udcc1 SETUP\n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n   \u2b55 \ud83d\udfe0 setup-001 Project Setup and Dependencies\n\n\ud83d\udcca SUMMARY\n   Total tasks: 2\n   todo: 2\n</code></pre></p> <p>Legend: - \u2b55 = Task status (open) - \ud83d\udd34 = Critical priority - \ud83d\udfe0 = High priority - \ud83d\udfe1 = Medium priority - \u26aa = Low priority</p>"},{"location":"getting-started/first-task/#step-4-edit-task-details","title":"Step 4: Edit Task Details","text":"<p>Open the task file in your editor:</p> <pre><code>vim tasks/backend/backend-001.md\n# Or use your preferred editor\n</code></pre> <p>File structure: <pre><code>---\nid: backend-001\ntitle: Setup PostgreSQL database\nstatus: todo\npriority: high\ntags:\n- backend\ndependencies: []\nassignee: developer\ncreated: 2025-10-05T10:00:00Z\nestimate: ~\ncomplexity: 3\narea: backend\n---\n\n# Setup PostgreSQL database\n\n## Context\nBrief description of what needs to be done and why.\n\n## Objectives\n- Clear, actionable objectives\n- Measurable outcomes\n- Success criteria\n\n## Tasks\n- [ ] Install PostgreSQL\n- [ ] Create database schema\n- [ ] Set up connection pooling\n- [ ] Configure authentication\n\n## Acceptance Criteria\n\u2705 **Database Running:**\n- PostgreSQL installed and running\n- Database schema created\n- Connection successful\n\n## Technical Notes\n- Use PostgreSQL 15+\n- Connection string in .env\n- Pool size: 20 connections\n</code></pre></p> <p>Edit the file to add: - Specific objectives - Checklist items - Acceptance criteria - Technical notes</p>"},{"location":"getting-started/first-task/#step-5-create-dependent-tasks","title":"Step 5: Create Dependent Tasks","text":"<p>Create a task that depends on the database setup:</p> <pre><code>taskguard create --title \"Create user authentication API\" --area api --priority high\n</code></pre> <p>Add dependency by editing the file:</p> <pre><code>vim tasks/api/api-001.md\n</code></pre> <p>Update the YAML front-matter: <pre><code>dependencies: [backend-001]\n</code></pre></p> <p>Now the API task is blocked until backend-001 is complete.</p>"},{"location":"getting-started/first-task/#step-6-validate-dependencies","title":"Step 6: Validate Dependencies","text":"<p>Check which tasks are ready to work on:</p> <pre><code>taskguard validate\n</code></pre> <p>Output: <pre><code>\ud83d\udea6 TASK STATUS\n   \u2705 Available tasks (dependencies satisfied):\n      \u2b55 backend-001 - Setup PostgreSQL database\n      \u2b55 setup-001 - Project Setup and Dependencies\n\n   \ud83d\udeab Blocked tasks:\n      \u274c api-001 - Create user authentication API (waiting for: backend-001)\n\n\u2705 VALIDATION PASSED\n   No issues found in 3 tasks\n\n\ud83d\udcca SUMMARY\n   Total tasks: 3\n   Available: 2\n   Blocked: 1\n   Parse errors: 0\n   Dependency issues: 0\n</code></pre></p> <p>Interpretation: - <code>backend-001</code> and <code>setup-001</code> are ready to work on (no dependencies) - <code>api-001</code> is blocked waiting for <code>backend-001</code> to complete</p>"},{"location":"getting-started/first-task/#step-7-update-task-status","title":"Step 7: Update Task Status","text":"<p>Start working on the backend task:</p> <pre><code>taskguard update status backend-001 doing\n</code></pre> <p>Output: <pre><code>\u2705 Updated task backend-001\n   status: todo \u2192 doing\n</code></pre></p> <p>Check status: <pre><code>taskguard list --status doing\n</code></pre></p> <p>Output: <pre><code>\ud83d\udcc1 BACKEND\n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n   \u25b6\ufe0f \ud83d\udfe0 backend-001 Setup PostgreSQL database\n\n\ud83d\udcca SUMMARY\n   Total tasks: 1\n   doing: 1\n</code></pre></p>"},{"location":"getting-started/first-task/#step-8-complete-the-task","title":"Step 8: Complete the Task","text":"<p>When work is finished, mark the task as done:</p> <pre><code>taskguard update status backend-001 done\n</code></pre> <p>Verify: <pre><code>taskguard validate\n</code></pre></p> <p>Output: <pre><code>\ud83d\udea6 TASK STATUS\n   \u2705 Available tasks (dependencies satisfied):\n      \u2b55 api-001 - Create user authentication API  \u2190 Now unblocked!\n      \u2b55 setup-001 - Project Setup and Dependencies\n\n   \ud83d\udeab Blocked tasks:\n      (none)\n\n\u2705 VALIDATION PASSED\n</code></pre></p> <p>Notice: <code>api-001</code> is now available because <code>backend-001</code> is complete!</p>"},{"location":"getting-started/first-task/#step-9-filter-tasks","title":"Step 9: Filter Tasks","text":"<p>View tasks by area:</p> <pre><code>taskguard list --area backend\n</code></pre> <p>View tasks by status:</p> <pre><code>taskguard list --status done\n</code></pre>"},{"location":"getting-started/first-task/#step-10-git-integration-optional","title":"Step 10: Git Integration (Optional)","text":"<p>TaskGuard can analyze Git commits to suggest status updates:</p> <pre><code># Make some commits mentioning task IDs\ngit commit -m \"backend-001: Install PostgreSQL and create schema\"\n\n# Sync from git\ntaskguard sync\n\n# TaskGuard suggests status updates based on commits\n</code></pre>"},{"location":"getting-started/first-task/#common-workflows","title":"Common Workflows","text":""},{"location":"getting-started/first-task/#create-work-complete","title":"Create \u2192 Work \u2192 Complete","text":"<pre><code># 1. Create task\ntaskguard create --title \"Implement feature X\" --area backend\n\n# 2. Start work\ntaskguard update status backend-002 doing\n\n# 3. Make changes\ngit add .\ngit commit -m \"backend-002: Implement core logic\"\n\n# 4. Complete\ntaskguard update status backend-002 done\n</code></pre>"},{"location":"getting-started/first-task/#create-task-chain","title":"Create Task Chain","text":"<pre><code># 1. Foundation task\ntaskguard create --title \"Setup\" --area setup --priority critical\n\n# 2. Dependent tasks (edit files to add dependencies)\ntaskguard create --title \"Backend API\" --area backend\n# Edit: dependencies: [setup-001]\n\ntaskguard create --title \"Frontend UI\" --area frontend\n# Edit: dependencies: [setup-001]\n\ntaskguard create --title \"Integration Tests\" --area testing\n# Edit: dependencies: [backend-001, frontend-001]\n\n# 3. Validate\ntaskguard validate\n</code></pre>"},{"location":"getting-started/first-task/#checklist-updates","title":"Checklist Updates","text":"<p>Update individual checklist items within a task:</p> <pre><code># Mark first checklist item as done\ntaskguard task update backend-001 1 done\n\n# Mark second item as done\ntaskguard task update backend-001 2 done\n</code></pre>"},{"location":"getting-started/first-task/#what-youve-learned","title":"What You've Learned","text":"<p>\u2705 Initialize TaskGuard in a project \u2705 Create tasks with metadata \u2705 Edit task files (YAML + Markdown) \u2705 Set up dependencies \u2705 Validate dependency chains \u2705 Update task status \u2705 Filter and list tasks \u2705 Git integration basics</p>"},{"location":"getting-started/first-task/#next-steps","title":"Next Steps","text":"<p>Now that you understand the basics:</p> <ul> <li>Task Structure - Deep dive into task format</li> <li>Dependencies - Master dependency management</li> <li>Git Sync - Automate with Git integration</li> <li>Common Workflows - Real-world patterns</li> </ul>"},{"location":"getting-started/first-task/#quick-reference","title":"Quick Reference","text":"<pre><code># Initialize\ntaskguard init\n\n# Create\ntaskguard create --title \"Task\" --area &lt;area&gt; --priority &lt;level&gt;\n\n# List\ntaskguard list [--area &lt;area&gt;] [--status &lt;status&gt;]\n\n# Update\ntaskguard update status &lt;task-id&gt; &lt;status&gt;\n\n# Validate\ntaskguard validate\n\n# Git sync\ntaskguard sync\n</code></pre> <p>Areas: setup, backend, frontend, api, auth, testing Statuses: todo, doing, review, done, blocked Priorities: low, medium, high, critical</p>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>Install TaskGuard globally to use with all your projects.</p>"},{"location":"getting-started/installation/#quick-install-recommended","title":"Quick Install (Recommended)","text":"<p>Use platform-specific scripts for automated installation:</p> macOSLinuxWindowsWSL <pre><code># Clone repository\ngit clone git@github.com:Guard8-ai/TaskGuard.git\ncd TaskGuard\n\n# Run install script\n./scripts/install-macos.sh\n</code></pre> <pre><code># Clone repository\ngit clone git@github.com:Guard8-ai/TaskGuard.git\ncd TaskGuard\n\n# Run install script\n./scripts/install-linux.sh\n</code></pre> <pre><code># Clone repository\ngit clone git@github.com:Guard8-ai/TaskGuard.git\ncd TaskGuard\n\n# Run install script\n.\\scripts\\install-windows.ps1\n</code></pre> <pre><code># Clone repository\ngit clone git@github.com:Guard8-ai/TaskGuard.git\ncd TaskGuard\n\n# Run install script\n./scripts/install-wsl.sh\n</code></pre> <p>Installation Location: <code>~/.cargo/bin/taskguard</code></p> <p>What the script does: 1. Checks prerequisites (Git, Rust 1.70+) 2. Builds release binary (<code>cargo build --release</code>) 3. Installs globally (<code>cargo install --path . --locked</code>) 4. Verifies installation</p> <p>Time: ~2-3 minutes (depending on build speed)</p>"},{"location":"getting-started/installation/#manual-installation","title":"Manual Installation","text":""},{"location":"getting-started/installation/#step-by-step","title":"Step-by-Step","text":"<ol> <li> <p>Clone Repository</p> <pre><code>git clone git@github.com:Guard8-ai/TaskGuard.git\ncd TaskGuard\n</code></pre> </li> <li> <p>Build Release Binary</p> <pre><code>cargo build --release\n</code></pre> <p>Output: <pre><code>Compiling taskguard v0.2.2\nFinished release [optimized] target(s) in 1m 23s\n</code></pre></p> </li> <li> <p>Install Globally</p> <pre><code>cargo install --path . --locked\n</code></pre> <p>Installation path: <code>~/.cargo/bin/taskguard</code></p> </li> <li> <p>Verify Installation</p> <pre><code>taskguard --version\n</code></pre> <p>Expected: <pre><code>taskguard 0.2.2\n</code></pre></p> </li> </ol>"},{"location":"getting-started/installation/#verification","title":"Verification","text":""},{"location":"getting-started/installation/#test-commands","title":"Test Commands","text":"<pre><code># Check version\ntaskguard --version\n\n# Show help\ntaskguard --help\n\n# Test in a project\ncd ~/test-project\ntaskguard init\n</code></pre> <p>Expected output from <code>taskguard init</code>: <pre><code>\ud83d\ude80 Initializing TaskGuard...\n\ud83d\udcdd Created example task: tasks/setup/001-project-setup.md\n\u2705 TaskGuard initialized successfully!\n\n\ud83d\udcc1 Created directories:\n   .taskguard/         # Configuration and state\n   tasks/              # Task files organized by area\n   tasks/setup/\n   tasks/backend/\n   tasks/frontend/\n   tasks/api/\n   tasks/auth/\n   tasks/testing/\n</code></pre></p>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/installation/#command-not-found","title":"Command Not Found","text":"<p>Issue: <pre><code>taskguard: command not found\n</code></pre></p> <p>Solution:</p> <ol> <li> <p>Check installation: <pre><code>ls -la ~/.cargo/bin/taskguard\n</code></pre></p> </li> <li> <p>Verify PATH: <pre><code>echo $PATH | grep -q \".cargo/bin\" &amp;&amp; echo \"\u2705 In PATH\" || echo \"\u274c Not in PATH\"\n</code></pre></p> </li> <li> <p>Add to PATH: <pre><code># Bash\necho 'export PATH=\"$HOME/.cargo/bin:$PATH\"' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n\n# Zsh\necho 'export PATH=\"$HOME/.cargo/bin:$PATH\"' &gt;&gt; ~/.zshrc\nsource ~/.zshrc\n</code></pre></p> </li> <li> <p>Restart terminal</p> </li> </ol>"},{"location":"getting-started/installation/#build-errors","title":"Build Errors","text":"<p>Issue: <pre><code>error: failed to compile taskguard\n</code></pre></p> <p>Solutions:</p> <ol> <li> <p>Update Rust: <pre><code>rustup update\nrustc --version  # Should be 1.70+\n</code></pre></p> </li> <li> <p>Clean build: <pre><code>cargo clean\ncargo build --release\n</code></pre></p> </li> <li> <p>Check dependencies: <pre><code># Linux: Install build essentials\nsudo apt install build-essential\n\n# macOS: Install Xcode tools\nxcode-select --install\n</code></pre></p> </li> </ol>"},{"location":"getting-started/installation/#permission-errors","title":"Permission Errors","text":"<p>Issue: <pre><code>Permission denied\n</code></pre></p> <p>Solution:</p> <pre><code># Make script executable\nchmod +x scripts/install-*.sh\n\n# Or use cargo directly (no sudo needed)\ncargo install --path . --locked\n</code></pre>"},{"location":"getting-started/installation/#repository-access-issues","title":"Repository Access Issues","text":"<p>Issue: <pre><code>fatal: repository not found\n</code></pre></p> <p>Solutions:</p> <ol> <li> <p>Check SSH access: <pre><code>ssh -T git@github.com\n</code></pre></p> </li> <li> <p>Verify organization membership:</p> <ul> <li>Ensure you're part of Guard8-ai organization</li> <li>Check repository permissions</li> </ul> </li> <li> <p>Use HTTPS with token: <pre><code>git clone https://YOUR_TOKEN@github.com/Guard8-ai/TaskGuard.git\n</code></pre></p> </li> </ol>"},{"location":"getting-started/installation/#platform-specific-notes","title":"Platform-Specific Notes","text":""},{"location":"getting-started/installation/#macos","title":"macOS","text":"<ul> <li>Requires: Xcode Command Line Tools</li> <li>Install location: <code>~/.cargo/bin/</code></li> <li>Universal binary: Works on Intel &amp; Apple Silicon</li> <li>Permissions: User-level (no admin required)</li> </ul>"},{"location":"getting-started/installation/#linux","title":"Linux","text":"<ul> <li>Requires: <code>build-essential</code> (Ubuntu/Debian) or equivalent</li> <li>Install location: <code>~/.cargo/bin/</code></li> <li>Supported distros: Ubuntu, Debian, Fedora, Arch, etc.</li> <li>Permissions: User-level (no sudo required)</li> </ul>"},{"location":"getting-started/installation/#windows","title":"Windows","text":"<ul> <li>Requires: Git for Windows, Rust</li> <li>Install location: <code>%USERPROFILE%\\.cargo\\bin\\</code></li> <li>PowerShell: May need execution policy adjustment</li> <li>Compatibility: Works with PowerShell, CMD, Windows Terminal</li> </ul>"},{"location":"getting-started/installation/#wslwsl2","title":"WSL/WSL2","text":"<ul> <li>Fully compatible with Linux installation</li> <li>Performance: WSL2 recommended for faster builds</li> <li>Cross-filesystem: Works across Windows/Linux filesystems</li> <li>Install location: <code>~/.cargo/bin/</code></li> </ul>"},{"location":"getting-started/installation/#updating-taskguard","title":"Updating TaskGuard","text":"<p>To update to the latest version:</p> <pre><code>cd TaskGuard\ngit pull origin main\ncargo install --path . --locked --force\n</code></pre> <p>Verify update: <pre><code>taskguard --version\n</code></pre></p>"},{"location":"getting-started/installation/#uninstalling","title":"Uninstalling","text":"<p>To remove TaskGuard:</p> <pre><code># Remove binary\ncargo uninstall taskguard\n\n# Or manually\nrm ~/.cargo/bin/taskguard                        # Linux/macOS\ndel %USERPROFILE%\\.cargo\\bin\\taskguard.exe      # Windows\n\n# Optional: Remove project data\n# Delete .taskguard/ and tasks/ from your projects\n</code></pre>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<p>Installation complete! Now:</p> <p>\u2192 Create Your First Task</p>"},{"location":"getting-started/prerequisites/","title":"Prerequisites","text":"<p>Before installing TaskGuard, ensure you have the required tools installed on your system.</p>"},{"location":"getting-started/prerequisites/#system-requirements","title":"System Requirements","text":"<p>TaskGuard is a lightweight CLI tool with minimal dependencies:</p> <ul> <li>Operating System: Linux, macOS, Windows, or WSL</li> <li>Disk Space: ~10MB for binary</li> <li>Memory: Minimal (runs in &lt;50MB RAM)</li> </ul>"},{"location":"getting-started/prerequisites/#required-software","title":"Required Software","text":""},{"location":"getting-started/prerequisites/#1-git","title":"1. Git","text":"<p>Why: TaskGuard uses Git for version control and history analysis.</p> <p>Installation:</p> macOSLinuxWindows <pre><code># Install via Xcode Command Line Tools\nxcode-select --install\n\n# Or via Homebrew\nbrew install git\n</code></pre> <pre><code># Ubuntu/Debian\nsudo apt update &amp;&amp; sudo apt install git\n\n# Fedora\nsudo dnf install git\n\n# Arch\nsudo pacman -S git\n</code></pre> <p>Download from git-scm.com</p> <p>Verify: <pre><code>git --version\n# Expected: git version 2.30+\n</code></pre></p>"},{"location":"getting-started/prerequisites/#2-rust-170","title":"2. Rust (1.70+)","text":"<p>Why: TaskGuard is built in Rust and requires the Rust toolchain for installation.</p> <p>Installation:</p> <p>Visit rustup.rs or run:</p> <pre><code>curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n</code></pre> <p>After installation: <pre><code>source ~/.cargo/env  # Linux/macOS\n# Restart terminal on Windows\n</code></pre></p> <p>Verify: <pre><code>rustc --version\n# Expected: rustc 1.70.0+\n\ncargo --version\n# Expected: cargo 1.70.0+\n</code></pre></p>"},{"location":"getting-started/prerequisites/#optional-requirements","title":"Optional Requirements","text":""},{"location":"getting-started/prerequisites/#github-access-private-repository","title":"GitHub Access (Private Repository)","text":"<p>TaskGuard is currently a private repository in the Guard8.ai organization.</p> <p>SSH Setup (Recommended):</p> <pre><code># Generate SSH key\nssh-keygen -t ed25519 -C \"your_email@example.com\"\n\n# Add to SSH agent\neval \"$(ssh-agent -s)\"\nssh-add ~/.ssh/id_ed25519\n\n# Copy public key\ncat ~/.ssh/id_ed25519.pub\n</code></pre> <p>Add the public key to GitHub: Settings \u2192 SSH Keys</p> <p>Test SSH connection: <pre><code>ssh -T git@github.com\n# Expected: Hi username! You've successfully authenticated...\n</code></pre></p> <p>Alternative: Personal Access Token</p> <p>Create a token at GitHub Settings \u2192 Developer \u2192 Personal Access Tokens</p>"},{"location":"getting-started/prerequisites/#environment-setup","title":"Environment Setup","text":""},{"location":"getting-started/prerequisites/#shell-configuration","title":"Shell Configuration","text":"<p>Ensure <code>~/.cargo/bin</code> is in your PATH:</p> <pre><code># Check PATH\necho $PATH | grep -q \".cargo/bin\" &amp;&amp; echo \"\u2705 Cargo bin in PATH\" || echo \"\u274c Not in PATH\"\n</code></pre> <p>If not in PATH, add to shell config:</p> BashZshFish <pre><code>echo 'export PATH=\"$HOME/.cargo/bin:$PATH\"' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n</code></pre> <pre><code>echo 'export PATH=\"$HOME/.cargo/bin:$PATH\"' &gt;&gt; ~/.zshrc\nsource ~/.zshrc\n</code></pre> <pre><code>set -U fish_user_paths $HOME/.cargo/bin $fish_user_paths\n</code></pre>"},{"location":"getting-started/prerequisites/#verification-checklist","title":"Verification Checklist","text":"<p>Before proceeding to installation, verify:</p> <ul> <li> Git installed and working</li> <li> Rust 1.70+ installed</li> <li> Cargo in PATH</li> <li> GitHub SSH access configured (for private repo)</li> <li> Terminal/shell properly configured</li> </ul> <p>Quick verification: <pre><code>git --version &amp;&amp; rustc --version &amp;&amp; cargo --version\n</code></pre></p> <p>Expected output: <pre><code>git version 2.39.0\nrustc 1.75.0\ncargo 1.75.0\n</code></pre></p>"},{"location":"getting-started/prerequisites/#next-steps","title":"Next Steps","text":"<p>Once prerequisites are met:</p> <p>\u2192 Install TaskGuard</p>"},{"location":"usage-examples/common-workflows/","title":"Common Workflows","text":"<p>Real-world TaskGuard usage patterns.</p>"},{"location":"usage-examples/common-workflows/#workflow-1-solo-development","title":"Workflow 1: Solo Development","text":"<pre><code># 1. Initialize\ncd ~/my-project\ntaskguard init\n\n# 2. Create foundation tasks\ntaskguard create --title \"Project setup\" --area setup --priority critical\n\n# 3. Create feature tasks\ntaskguard create --title \"Build API\" --area backend --priority high\ntaskguard create --title \"Build UI\" --area frontend --priority high\n\n# 4. Add dependencies (edit files)\nvim tasks/backend/backend-001.md\n# dependencies: [setup-001]\n\n# 5. Validate\ntaskguard validate\n\n# 6. Work through tasks\ntaskguard update status setup-001 doing\n# ... complete setup ...\ntaskguard update status setup-001 done\n\n# 7. Backend unblocked\ntaskguard update status backend-001 doing\n</code></pre>"},{"location":"usage-examples/common-workflows/#workflow-2-team-collaboration","title":"Workflow 2: Team Collaboration","text":"<pre><code># Alice: Create tasks\ntaskguard create --title \"Database schema\" --area backend\ngit add tasks/\ngit commit -m \"Add backend tasks\"\ngit push\n\n# Bob: Pull and work\ngit pull\ntaskguard list\ntaskguard update status backend-001 doing\ngit commit -am \"Start database work\"\ngit push\n\n# Alice: Sync\ngit pull\ntaskguard list --status doing\n</code></pre>"},{"location":"usage-examples/common-workflows/#workflow-3-feature-branch-development","title":"Workflow 3: Feature Branch Development","text":"<pre><code># Create feature branch\ngit checkout -b feature/authentication\n\n# Add tasks\ntaskguard create --title \"JWT implementation\" --area auth\ntaskguard create --title \"Login endpoint\" --area api\n\n# Work and commit\ntaskguard update status auth-001 doing\n# ... work ...\ngit add tasks/\ngit commit -m \"Add auth tasks and implementation\"\n\n# Merge to main\ngit checkout main\ngit merge feature/authentication\n</code></pre>"},{"location":"usage-examples/common-workflows/#next-steps","title":"Next Steps","text":"<ul> <li>Integration Patterns</li> <li>Troubleshooting</li> </ul>"},{"location":"usage-examples/integration-patterns/","title":"Integration Patterns","text":"<p>Integrate TaskGuard with other tools and workflows.</p>"},{"location":"usage-examples/integration-patterns/#git-workflow-integration","title":"Git Workflow Integration","text":"<pre><code># Commit with task IDs\ngit commit -m \"backend-001: Implement authentication\"\n\n# Sync from git\ntaskguard sync\n\n# Auto-suggest status updates\n</code></pre>"},{"location":"usage-examples/integration-patterns/#cicd-integration","title":"CI/CD Integration","text":"<pre><code># .github/workflows/taskguard.yml\nname: Validate Tasks\non: [push]\njobs:\n  validate:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - run: cargo install taskguard\n      - run: taskguard validate\n</code></pre>"},{"location":"usage-examples/integration-patterns/#next-steps","title":"Next Steps","text":"<p>See Troubleshooting for common issues.</p>"},{"location":"usage-examples/troubleshooting/","title":"Troubleshooting","text":"<p>Common issues and solutions.</p>"},{"location":"usage-examples/troubleshooting/#command-not-found","title":"Command Not Found","text":"<p>Issue: <code>taskguard: command not found</code></p> <p>Solution: <pre><code># Check PATH\necho $PATH | grep -q \".cargo/bin\" &amp;&amp; echo \"\u2705\" || echo \"\u274c\"\n\n# Add to PATH\necho 'export PATH=\"$HOME/.cargo/bin:$PATH\"' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n</code></pre></p>"},{"location":"usage-examples/troubleshooting/#parse-errors","title":"Parse Errors","text":"<p>Issue: <code>Failed to parse YAML front-matter</code></p> <p>Solution: - Check <code>---</code> delimiters - Validate YAML syntax - Ensure required fields present</p>"},{"location":"usage-examples/troubleshooting/#circular-dependencies","title":"Circular Dependencies","text":"<p>Issue: <code>Circular dependency detected</code></p> <p>Solution: <pre><code>taskguard validate\n# Fix dependency chain in task files\n</code></pre></p>"},{"location":"usage-examples/troubleshooting/#next-steps","title":"Next Steps","text":"<p>See Installation for setup issues.</p>"}]}